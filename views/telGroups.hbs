<!DOCTYPE html>
<html>
<head lang="en">
  <meta charset="UTF-8">
  <title>{{roomID}}</title>
  <style>
    #msglog, #messageInput {
      border: 1px solid #ccc;
      width: 99%;
      height: 350px;
      overflow-y: auto;
      font-size: 14px;
	  background-color: #fff;
    }
    #messageInput {
		width: 98%;
      height: 80px;
    }
    .message {
      line-height: 22px;
    }
    .message .user {
      padding-right: 5px;
      padding-left: 5px;
      color: brown;
    }
    .sysMsg {
      color: #c1bfbf;
      padding-right: 5px;
      padding-left: 5px;
      font-size: 12px;
    }
    #telephones {
      width: 490px;
      padding: 0 5px 5px;
    }
	body {
		background-color: #3498db;
		font-size: 14px;
		font-family: sans-serif;
	}
	#main-content {
		
		height: 100%;
		width: 40em;
		margin: auto;
		overflow:hidden;
	}
	#telephoneInfo {
		font-weight: 600;
		
	}
	button {
		border-color: #3f87a6;
		color: #29627e;
		cursor: pointer;
		display: inline-block;
		line-height: 1;
		font-weight: 700;
		letter-spacing: normal;
		border: 2px solid #9b9b9b;
		background-color: #fff;
		padding: 5px 11px;
		font-size: 1rem;
		font-family: "Open Sans",arial,x-locale-body,sans-serif;
		font-style: normal;
	}
	
  </style>
</head>
<body>
<div id="main-content">
	<div id="telephoneInfo" >
		<div style="margin-bottom: 0.3em;">Telephone Serial: <span id="telephoneSerial"></span></div>
		<div style="margin-bottom: 0.3em;">My Groups: {{groupList}}</div>
		<div style="margin-bottom: 0.3em;">Current Group: {{groupID}}</div>
		<div style="margin-bottom: 0.3em;">Active Telephones in group: <span id="count">{{telephones.length}}</span></div>
		<div style="color: white;">Online Telephone Serials:  <div style="color: #fbff0b;" id="telephones">{{telephones}}</div></div>
	</div>


	  <div id="msglog">

	  </div>
	  <textarea name="message" id="messageInput"></textarea>
	  <br/>
	  Press enter to send message
	  <button id="joinOrLeave">Deactivate Listening</button>
	  
	  <!-- auth token received from server -->
	  <div id="tokenInput" style="display: none;" value="{{token}}"></div>

</div>
  
  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/jquery.js"></script>
  <script>
    $(function () {
	
	  var telephoneSerial = '';
	  var token = $("#tokenInput").attr("value");
	  
	  var parseJwt = function (token) {
            var base64Url = token.split('.')[1];
            var base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse(window.atob(base64));
      };
	  
	  
	  try {
		tokenPayload = parseJwt(token);
	  } catch(err) {
		console.error("Unable to parse payload in JWT token");
		console.error(err);
	  }
	  
	  
	  if(!token){
		alert("There's a problem with this page. Please try to login again");
		console.error("There's a problem with this page. Please try to login again!");
		// After five seconds redirect to login page
		setTimeout(()=>{ window.location.replace(window.location.origin + "/login.html")}, 5000)
	  }
	  
      
      telephoneSerial = tokenPayload["telephone"]["TelephoneSerial"];
	  
      $('#telephoneSerial').text(telephoneSerial);
	  
	 
      // ---------创建连接-----------
      //var socket = io();
	  
	  var socket = io.connect('', {
		query: 'token=' + token
	  });

      // 加入房间
      socket.on('connect', function () {
	  console.log("connected");
	  
		//Change when the join group logic
		// currently join on connect, can auto join if persisted in DB 
		// Then only marked as active/inactive in a joined group
        socket.emit('join', telephoneSerial);
      });
	  
	  socket.on("unauthorized", function(error) {
		  if (error.data.type == "UnauthorizedError" || error.data.code == "invalid_token") {
			// redirect user to login page perhaps?
			console.log("User's token has expired");
			setTimeout(()=>{ window.location.replace(window.location.origin + "/login.html")}, 5000)
		  }
		});

      // 监听消息
      socket.on('msg', function (telephoneSerial, msg) {
	  console.log(telephoneSerial,msg);
        var message = '' +
            '<div class="message">' +
            '  <span class="user">' + telephoneSerial + ': </span>' +
            '  <span class="msg">' + msg.content + '</span>' +
            '</div>';
        $('#msglog').append(message);
        // 滚动条保持最下方
        $('#msglog').scrollTop($('#msglog')[0].scrollHeight);  
      });
	  
	  socket.on('broadcast', function (msg) {
	  console.log("received broadcast", msg);
	  var message = '';
		// First MANUALLY submit acknowledgement to server if message in sequence is msg.STARTMESSAGE
		socket.send({				
			telephoneSerial,
			broadcastID: msg.messageID,
			clientReceivedAt: new Date().getTime()
		});
		message = '' +
		'<div class="message" id="' + msg.messageID +'">' +
		'  <span class="user"> BROADCAST : </span>' +
		'  <span class="msg">TimeStamp:' + new Date().getTime() + ',' + msg.content + '</span>' +
		'</div>';
	  
        
        $('#msglog').append(message);
        // 滚动条保持最下方
        $('#msglog').scrollTop($('#msglog')[0].scrollHeight); 
      });
	  
	  socket.on('privateConversationStarted', function (msg) {
        var message = '' +
            '<div class="message" convID="' + msg.convID + '" id="' + msg.messageID + '">' +
            '  <span class="user"> PRIVATE: </span>' +
            '  <span class="msg">' + msg.content + '</span>' +
            '</div>';
        $('#msglog').append(message);
		
		// emit privateConversation event to start private conversation with server
		// send a random message from our client
		var randomMessages = ["Oranges", "Apples", "Mangoes", "Bananas", "Grapes", "Peach", "Guava", "End Of Conversation"];
		
		
		socket.emit('privateConversation', {
			convID: msg.convID,
			telephoneSerial: msg.telephoneSerial,
			messageID: uuid4(),
			content: randomMessages[Math.floor(Math.random()* randomMessages.length)]
		});
		
		// Append Client reply to window - without UUID, it shall receive 
		
        // 滚动条保持最下方
        $('#msglog').scrollTop($('#msglog')[0].scrollHeight);  
      });
	  
	  socket.on('privateConversation', function (msg) {
        var message = '' +
            '<div class="message" convID="' + msg.convID + '" id="' + msg.messageID + '">' +
            '  <span class="user"> PRIVATE: </span>' +
            '  <span class="msg">' + msg.content + '</span>' +
            '</div>';
        $('#msglog').append(message);
		
		// emit privateConversation event to start private conversation with server
		// send a random message from our client
		var randomMessages = ["Oranges", "Apples", "Mangoes", "Bananas", "Grapes", "Peach", "Guava", "End Of Conversation"];
		
		
		socket.emit('privateConversation', {
			convID: msg.convID,
			telephoneSerial: msg.telephoneSerial,
			messageID: uuid4(),
			content: randomMessages[Math.floor(Math.random()* randomMessages.length)]
		});
		
		// Append Client reply to window - without UUID, it shall receive 
		
        // 滚动条保持最下方
        $('#msglog').scrollTop($('#msglog')[0].scrollHeight);  
      });
	  
	  
	  socket.on('sequence', function (telephoneSerialRcvd, msg) {
		var message = '';
		// First MANUALLY submit acknowledgement to server if message in sequence is msg.STARTMESSAGE
		if(typeof msg === 'object' && msg.content === 'STARTMESSAGE'){
			socket.send({
				
				telephoneSerial,
				clientReceivedAt: new Date().getTime()
			});
			message = '' +
            '<div class="message" id="' + msg.messageID +'">' +
            '  <span class="user"> BROADCAST : </span>' +
            '  <span class="msg">TimeStamp:' + new Date().getTime() + ',' + msg.content + '</span>' +
            '</div>';
		} else{
			message = '' +
				'<div class="message">' +
				'  <span class="user">' + telephoneSerialRcvd + ': </span>' +
				'  <span class="msg">TimeStamp:' + new Date().getTime() + ',' + msg + '</span>' +
				'</div>';
		}
		
	  
        
        $('#msglog').append(message);
        // 滚动条保持最下方
        $('#msglog').scrollTop($('#msglog')[0].scrollHeight);  
      });

      // 监听系统消息
      socket.on('sys', function (sysMsg, telephones) {
        var message = '<div class="sysMsg">' + sysMsg + '</div>';
        $('#msglog').append(message);

        $('#count').text(telephones.length);
        $('#telephones').text(telephones);
      });
	  
	  // 删除消息
      socket.on('sysDelMess', function (messageID) {
		// The remove sys message will replace the existing message
		// We shall change the class and remove it's id
		$("div#" + messageID).attr('class', 'sysMsg'); // change the class of the message to a sys message
		$("div#" + messageID).text("this message has been removed from client"); // change it's text to generic
		// save the id under different attribute then remove it
		$("div#" + messageID).attr('prevID', messageID);
		$("div#" + messageID).removeAttr('id');		
        		
		// TODO: Succeeded, send back acknowledgement to server so it's marked as hidden on server
		
      });

	  $('#msglog').on('click', '.message', function(){
	  
			if($(this).attr('id') !== undefined){
			
			console.log({
					messageID: $(this).attr('id'),
					telephoneSerial: telephoneSerial
			   });
				//Log CTA clicks
			   socket.emit('ctaClicked', {
					messageID: $(this).attr('id'),
					telephoneSerial: telephoneSerial
			   });
			}      		
		});

      // 发送消息
      $('#messageInput').keydown(function (e) {
        if (e.which === 13) {
          e.preventDefault();
          var msg = $(this).val();
          // Check if hideClientMessage message command and emit event
          if(msg.substr(0,4) === "Tel_"){ // Might be delete message ivocation - verify further
          	let message = msg.split("|");
          	if(message.length === 2) {
          		//It is a hideClientMessage invocation.
          		// Emit hideClientMessage event
          		socket.emit("hideClientMessage", {
          			telephoneSerial,
          			messageID: message[1]
          		});
          	}
          }
          
          $(this).val('');

          socket.send(msg);
        }
      });

      // Exit Group
      $('#joinOrLeave').click(function () {
        if ($(this).text() === 'Deactivate Listening') {
          $(this).text('Activate Listening');
          socket.emit('leave');
          var msg = 'You shall no longer receive messages from server, Click "Listen"';
          $('#msglog').append('<div class="sysMsg">'+msg+'</div>');
        } else {
          $(this).text('Deactivate Listening');
          socket.emit('join', telephoneSerial);
        }

      });
	  
	  var uuid4 = function () {
		//// return uuid of form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
		var uuid = '', ii;
		for (ii = 0; ii < 32; ii += 1) {
		  switch (ii) {
		  case 8:
		  case 20:
			uuid += '-';
			uuid += (Math.random() * 16 | 0).toString(16);
			break;
		  case 12:
			uuid += '-';
			uuid += '4';
			break;
		  case 16:
			uuid += '-';
			uuid += (Math.random() * 4 | 8).toString(16);
			break;
		  default:
			uuid += (Math.random() * 16 | 0).toString(16);
		  }
		}
		return uuid;
	  };
	  
    });
  </script>
</body>
</html>